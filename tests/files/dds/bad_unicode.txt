****EACH student submits a (unique) design document.****

---- Name ----

>> Fill your name, UT EID, CS login, email address, and unique number:

Name: Christina Saylor
EID: cs23142
CS login: wishiwasmorgan
Email: gats@yahoo.com
Unique Number: 2


Slip days used on this project: 2

---- GROUP ----

>> Fill the names, UT EIDs, CS logins, email addresses, and unique numbers
>> of your group members.  Also fill in each person's ranking on the 
>> partner evaluation scale, as determined by you.

Name1: Esaul Sam
EID1: e35252
CS login: nsahuo
Email: cats@utexas.edu
Unique Number: 2346855
Ranking (scale below): Very Good

Name2: Johnny Travaillo
EID2: ax634563
CS login: jtrav
Email: dogs@gmail.com
Unique Number: 51875
Ranking (scale below): Very Good

Name3:
EID2:
CS login:
Email:
Unique Number:
Ranking (scale below):


---- PARTNER EVALUATION SCALE ----

>> Excellent: Consistently went above and beyond - tutored others, carried
>> more than his/her fair share of the load.

>> Very Good: Consistently did what he/she was supposed to do, very well
>> prepared and cooperative.

>> Satisfactory: Usually did what he/she was supposed to do, minimally
>> prepared and cooperative.

>> Marginal: Sometimes failed to show up and/or rarely prepared.

>> Deficient: Often failed to show up and/or rarely prepared.

>> Unsatisfactory: Consistently failed to show up and/or unprepared.

>> Superficial: Practically no participation.

>> No Show: No participation at all.


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

Piazza, as always.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

There were no new structs, global or static variables, typedefs, or 
Enumerations needed for Argument Passing.


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

To arrange the arguments in argv[] properly, we first put the arguments 
In a temp array, then iterated across it backwards while pushing those 
Arguments through esp. We keep from overflowing the stack page by 
Using the memory that�s given to us through install_page() as well as 
Using memcpy to keep us from going over, since memcpy will error out 
If the memory cannot be allocated or pages that have been allocated 
Overlap.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?
Because strtok_r is reentrant, so its execution can be safely 
Interrupted and still function properly, which is necessary when 
Interrupts are on.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
One advantage could be that the kernel is relieved of having to do that operation each and every time there is a system call, which is nice, since there�s not really any reason that a process should not be able to take care of it.  Also, the shell already parses commands, so it could be used to parse executables as well.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Bool validate_ptr(void *ptr) � Our pointer validation function, 
Used before system call functions are made when their parameters are pointers.

Struct openfile � A structure that holds files that are open; to be 
Used to place files in two different lists, a file list and a global 
List.
{
  int fd; // File descriptor
  struct file *f; // Pointer to the file
  struct list_elem elemF; // List element for thread's file list
  struct list_elem elemE; // List element for the global executables list
  char name[20]; // File name or path
}

Struct lock fileLock � A lock that keeps threads from manipulating 
Files when others are in the middle of doing so.

Struct lock metaLock � A lock that keeps threads from manipulating 
The metathread structure in threads

Struct metathread � a structure that holds onto important information 
Of threads, even after they�ve been closed or otherwise reaped.
{
  struct thread *parentptr; // A pointer to the parent thread
  int parenttid; // The TID of the parent thread
  int owntid; // The TID of the corresponding thread
  int ownstatus; // The exit status of the corresponding thread
  struct list_elem elemM; // List element for the global meta_list
  bool wait_already_called; // Keeps track of whether or not wait has been called
  int load_has_passed; // Keeps track of whether or not the child has loaded successfully
  bool has_exited; // Keeps track of whether or not the child has exited
}

Struct list meta_list � a global list holding onto the metathreads

Struct list exec_list � a global list of executing files

Struct condition metaCond � The global condition variable for metathreads

(in Thread.c)
Struct list files � A list of files open in a thread

Bool fds[128] � Available file descriptors (all 128 of them), 0 for 
Available, 1 for in use.


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are unique to that process only.  They are used to 
Access files and their information, but hold onto information like 
The file position separately between FDs.  For example, if a process 
Opened a file twice, it would receive two different file descriptors 
Which would have different information in them, meaning they could 
Each have a different position in the file.


---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

When a system call that asks to read/write to a file occurs, it is 
Read into the system call switch. Once it�s there, the interrupt frame 
Is parsed to be put into the function properly (this is of course after 
Many checks that the pointers that have been passed in are ok).  Once 
That�s done, the function is called, and we first acquire the file 
Lock, since otherwise we may be reading information that is being 
Actively modified.  In read, we make sure the buffer isn�t null or in kernel space, then we check to make sure where it is we�re outputting too.  If from a keyboard, we continually check the keyboard for inputs until the size is reached, all the while it�s being put into the buffer.  If we�re readying from a file, we use the provided fd to find that file, open it, read from it, then release the lock.  In the case of write, we acquire the fileLock. If the fd is 1, we write the buffer to the console in one go.  Otherwise, we 
Find the file that corresponds to the fd, and write to it, then 
Release the lock.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

When wait is called, we first acquire our metaLock, since we�ll be 
Accessing important meta data on the child process we�re waiting on. 
First, we find said child in the meta_list.  When it�s been found, 
We check to make sure that it is not waiting on itself, the child 
Is a child to this parent process that�s waiting on it, that wait 
Hasn�t already been called, and that it�s already been loaded.  If 
those conditions are satisfied, then we wait on our child process. 
Otherwise, we immediately return the exit status. Once the child 
That�s being waiting on exits, we broadcast the metaLock, save the 
Exit status to a local variable to be returned, remove the child 
From the meta thread list, release memory, and lock_release the 
metaLock.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

First, when a system call occurs, if the pointer to the interrupt 
Frame that we receive is bad, if it�s not in user space, memory 
Allocation for it fails, or if it�s not above the phys_base, we 
Immediately fail out.  This and other pointers that we�re given 
By the user must be checked and doubly checked to make sure they�re 
Not dangerous, since they�re given to use by the user.

After that, each pointer that is destined to be used within system 
Calls is also checked.  That pointer must not be null, point to user 
Space, and memory should be able to be allocated to it.  Most of these 
Checks are done in functions that just so happen to contain their own 
Error checking, such as pagedir_get_page(), and calls to functions 
Such as file_open also contain free() calls in case a pointer is 
Null.

In the case of writing, if the given file that we�re wanting to open 
Is non-existant, then the filesys_open() function gives a null pointer 
To file_open(), which then closes the �inode� is passed to it and free the file that it allocated memory to.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We have a lock called metaLock to make sure that the load finishes before 
The process_execute call within exec.  The success of the load is also 
Held in the metathread, which is global, and as such load can modify it.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

If we call wait before the child exits, then we check the status of the 
Child, which will be contained in metathread, and if it�s still running, 
We wait on it until it�s finished.  Once that occurs, we leave that while 
Loop and collect the status.  If the child has already exited, then we 
Check the metathread to see was its status was when it exited.  In many cases we call exit, which takes care of freeing our memory.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

Checking to make sure that pointers were valid before using them 
Throughout the program only required a few checks that, while sometimes 
Redundant and tedious, could be reduced to a single function many times, 
Or were already implemented into other functions that we were calling anyway. 

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Our way of implementing FDs ensured that we always used the �lowest� numbered fd each time, and as iterating through our list of fds for them would be faster than having to hunt-and-peck for the ones that we�ve given out, which can be an optimization that can be non-negligible, depending on how many files are in use by processes.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?



			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future semesters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future semesters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?

>> Any other comments?

