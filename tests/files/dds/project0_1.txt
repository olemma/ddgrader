################
YOUR INFO
################
Name1:Shin rio
EID1:sr99
CS login:srio
Email:srio1@gmail.com
Unique Number:51000

Slip days used:0

****EACH student submits a (unique) design document.****

################
YOUR PARTNER'S INFO
################
Name1:Chris Rock
EID1:cr00
CS login:CROCK
Email:the_rock@yahoo.com
Unique Number:51999

Your partner's ranking (scale below):Satisfactory

################
PARTNER EVALUATION SCALE
################
Excellent: Consistently went above and beyond - tutored others, carried
more than his/her fair share of the load.

Very Good: Consistently did what he/she was supposed to do, very well
prepared and cooperative.

Satisfactory: Usually did what he/she was supposed to do, minimally
prepared and cooperative.

Marginal: Sometimes failed to show up and/or rarely prepared.

Deficient: Often failed to show up and/or rarely prepared.

Unsatisfactory: Consistently failed to show up and/or unprepared.

Superficial: Practically no participation.

No Show: No participation at all.

################
Preliminaries
################
(1) If you have any preliminary comments on your submission, notes for
  the TAs, or extra credit, please give them here.

Be nice please :D
For Part 0 #1, if it seems off, open it in sublime. textpad has a tendency to screw up spacing. There is a linear view and a graph format. They are both the same graph but only the linear view has all the data.

(2) Please cite any offline or online sources you consulted while
  preparing your submission, other than the Linux documentation,
  course text, and lecture notes.

The loop to check if the user entered a number is a modified version of this: http://forum.codecall.net/topic/61962-re-check-if-input-is-int-float-or-char/
A lot of the code is based on the book

################
Questions regarding Part 0
################
(1) How many child processes are created when doFib() begins with 
  an input of 5?  Show the return value for each child process, numbering
  the processes beginning with 0 (the original process) and incrementing for
  each child process.

doFib(5) [Process 0] [Returns 5]
	->doFib(4)[Process 1] [Returns 3]
		->doFib(3) [Process 2] [Returns 2]
			->doFib(2) [Process 3] [Returns 1]
				->doFib(1) [Process 4] [Returns 1]
				->doFib(0) [Process 5] [Returns 0]
			->doFib(1) [Process 6] [Returns 1]
		->doFib(2) [Process 7] [Returns 1]
			->doFib(1) [Process 8] [Returns 1]
			->doFib(0) [Process 9] [Returns 0]
	->doFib(3) [Process 10] [Returns 2]
		->doFib(2) [Process 11] [Returns 1]
			->doFib(1) [Process 12] [Returns 1]
			->doFib(0) [Process 13] [Returns 0]
		->doFib(1) [Process 14] [Returns 1]

Graph Format:

           5
        /     \
      4         3
     /  \      / \
    3    2    2   1
   /\   /\   /\
  2  1 1  0 1  0
 /\ 
1  0

(2) In part 0.3, which flavor of exec did you choose to use?  Why?

We used execve in our code. The first reason was that the book did the same thing. However, upon looking at the linux man pages, its easy to see why. execl, execlp, and execle all require you to put in the arguments individually which is a pain. Out of the ones left, any one of them could have worked. Execv and execve use paths rather than files (used by execvp and execvpe) and the two paris only differ by the inclusion of envp. Its safer to control all the variables and to introduce a path rather than an absolute file (in case it messes up) so the book went with execve. We mirrored that choice because of the same reason.


################
Questions regarding Part 1
################
(1) In the provided utility function Signal(), what does the call to
  sigaction() do?  Why was sigaction() used instead of signal()?

Sigaction basically links a signal to a process. Upon recieving a Signal S, you will perform Process P. This is exactly the behavior we want as we want to override what happens when we recieve a signal. First of all, Signal is very finiky. Reading the man page, it is "undefined after it ignores a SIGFPE, SIGILL, or SIGSEGV signal that was not generated by kill(2) or raise(3)." Aditionally, the effects of signal in a miltithreaded process are unspecified (). ADITONALLY, when signal is called, it resets itself to the default which means it must reinstall it (again from the linux documentation) which leaves an opportunity where a signal could slip by.

(2) What is the last assembly language instruction executed by the
  signal handler function that you write?  (You may choose either signal
  handler.)

The last one that is executed is
0x00000000004008fe <+49>:    retq
which is return for 64-bit x86 machines

(3) After the instruction identified in the previous question executes, 
  what is the next assembly language instruction executed?

The next instruction is
=> 0x00007ffff7a4ad40 <+0>:     mov    $0xf,%rax
This is needed because the the next call is 
0x00007ffff7a4ad47 <+7>:     syscall
which needs to figure out which systemcall to execute. The vale of %rax determines which system call to execute.

(4) When the signal handler finishes running, it must restore all of
  the registers from the interrupted thread to exactly their values
  before the signal occurred. How is this done?

Everything about the current thread is put into the Process Control Block. This includes its resgisters. So when a context switch happens, it loads up the PCB, gets the registers and restores them. This happens when the retq instruction is called (I think).

################
Questions regarding Part 2
################
(1) In msh.c, we use three separate signal handlers to catch our signals. 
  You can also use a single signal handler to catch all three signals.  Is
  there a design advantage of one over the other?  Explain your answer.

Honestly, its a matter of fuctionality and clarity. If you use just one signal handler, then you will have an if statement inside it to handle the various signals. Thats basically the same thing as installing different signal handlers. Although you can combine the code with just one, the additional clarity in what you are trying to do is much better with seprate signal handlers. It makes the code easier to read and easier to understand.
